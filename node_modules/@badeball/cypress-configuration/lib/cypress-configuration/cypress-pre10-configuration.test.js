"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const assert_1 = __importDefault(require("assert"));
const cypress_pre10_configuration_1 = require("./cypress-pre10-configuration");
function example(method, options, attribute, expected) {
    it(`should return ${attribute} = ${util_1.default.inspect(expected)} for ${util_1.default.inspect(options)}}`, () => {
        const { cypressConfig, cypressConfigPath = "cypress.json", cypressEnvConfig, cypressProjectPath, } = options;
        const cwd = path_1.default.join(process.cwd(), "tmp", "unit");
        const fullCypressProjectPath = cypressProjectPath
            ? path_1.default.join(cwd, cypressProjectPath)
            : cwd;
        fs_1.default.rmSync(cwd, { recursive: true, force: true });
        fs_1.default.mkdirSync(fullCypressProjectPath, { recursive: true });
        if (cypressConfig) {
            fs_1.default.writeFileSync(path_1.default.join(fullCypressProjectPath, cypressConfigPath), JSON.stringify(cypressConfig, null, 2));
        }
        if (cypressEnvConfig) {
            fs_1.default.writeFileSync(path_1.default.join(fullCypressProjectPath, "cypress.env.json"), JSON.stringify(cypressEnvConfig, null, 2));
        }
        const actual = method(Object.assign({ argv: [], env: {}, cwd }, options));
        assert_1.default.deepStrictEqual(actual[attribute], expected);
    });
}
describe("resolvePre10Configuration()", () => {
    // Default
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {}, "integrationFolder", "cypress/integration");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {}, "fixturesFolder", "cypress/fixtures");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {}, "supportFile", "cypress/support/index.js");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {}, "testFiles", "**/*.*");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {}, "ignoreTestFiles", "*.hot-update.js");
    // Simple CLI override
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config", "integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config=integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-c", "integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    // CLI override with preceding, comma-delimited configuration
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config", "foo=bar,integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config=foo=bar,integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-c", "foo=bar,integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    // CLI override with succeeding, comma-delimited configuration
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config", "integrationFolder=foo/bar,foo=bar"],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config=integrationFolder=foo/bar,foo=bar"],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-c", "integrationFolder=foo/bar,foo=bar"],
    }, "integrationFolder", "foo/bar");
    // CLI override with last match taking precedence
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: [
            "--config",
            "integrationFolder=baz",
            "--config",
            "integrationFolder=foo/bar",
        ],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: [
            "--config=integrationFolder=baz",
            "--config=integrationFolder=foo/bar",
        ],
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-c", "integrationFolder=baz", "-c", "integrationFolder=foo/bar"],
    }, "integrationFolder", "foo/bar");
    {
        const envTestMatrix = [
            {
                env: {
                    CYPRESS_integrationFolder: "foo/bar",
                },
                expected: "foo/bar",
            },
            {
                env: {
                    cypress_integrationFolder: "foo/bar",
                },
                expected: "foo/bar",
            },
            {
                env: {
                    CYPRESS_integration_folder: "foo/bar",
                },
                expected: "foo/bar",
            },
            {
                env: {
                    cypress_integration_folder: "foo/bar",
                },
                expected: "foo/bar",
            },
            {
                env: {
                    CYPRESS_INTEGRATION_FOLDER: "foo/bar",
                },
                expected: "foo/bar",
            },
            {
                env: {
                    cypress_INTEGRATION_FOLDER: "foo/bar",
                },
                expected: "foo/bar",
            },
            // Erroneous camelcase
            {
                env: {
                    CYPRESS_integrationfolder: "foo/bar",
                },
                expected: "cypress/integration",
            },
            {
                env: {
                    cypress_integrationfolder: "foo/bar",
                },
                expected: "cypress/integration",
            },
        ];
        for (let { env, expected } of envTestMatrix) {
            example(cypress_pre10_configuration_1.resolvePre10Configuration, {
                env,
            }, "integrationFolder", expected);
        }
    }
    // Override with cypress.json
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        cypressConfig: { integrationFolder: "foo/bar" },
    }, "integrationFolder", "foo/bar");
    // Override with cypress.json in custom location
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config-file", "foo.json"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressConfigPath: "foo.json",
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config-file=foo.json"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressConfigPath: "foo.json",
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-C", "foo.json"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressConfigPath: "foo.json",
    }, "integrationFolder", "foo/bar");
    // Override with cypress.json & custom project path.
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project", "foo"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressProjectPath: "foo",
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project=foo"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressProjectPath: "foo",
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-P", "foo"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressProjectPath: "foo",
    }, "integrationFolder", "foo/bar");
    // Override with cypress.json in custom location & custom project path.
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config-file", "foo.json", "--project", "foo"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressConfigPath: "foo.json",
        cypressProjectPath: "foo",
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config-file=foo.json", "--project", "foo"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressConfigPath: "foo.json",
        cypressProjectPath: "foo",
    }, "integrationFolder", "foo/bar");
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-C", "foo.json", "--project", "foo"],
        cypressConfig: { integrationFolder: "foo/bar" },
        cypressConfigPath: "foo.json",
        cypressProjectPath: "foo",
    }, "integrationFolder", "foo/bar");
    /**
     * Environment part starts here.
     */
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {}, "env", {});
    // Simple CLI override
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env", "FOO=foo"],
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env=FOO=foo"],
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-e", "FOO=foo"],
    }, "env", { FOO: "foo" });
    // CLI override with preceding, comma-delimited configuration
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env", "BAR=bar,FOO=foo"],
    }, "env", { FOO: "foo", BAR: "bar" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env=BAR=bar,FOO=foo"],
    }, "env", { FOO: "foo", BAR: "bar" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-e", "BAR=bar,FOO=foo"],
    }, "env", { FOO: "foo", BAR: "bar" });
    // CLI override with succeeding, comma-delimited configuration
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env", "FOO=foo,BAR=bar"],
    }, "env", { FOO: "foo", BAR: "bar" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env=FOO=foo,BAR=bar"],
    }, "env", { FOO: "foo", BAR: "bar" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-e", "FOO=foo,BAR=bar"],
    }, "env", { FOO: "foo", BAR: "bar" });
    // CLI override with last match taking precedence
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env", "FOO=baz", "--env", "FOO=foo"],
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env=FOO=baz", "--env=FOO=foo"],
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-e", "FOO=baz", "-e", "FOO=foo"],
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--env", "FOO=foo", "--env", "BAR=bar"],
    }, "env", { BAR: "bar" });
    {
        const envTestMatrix = [
            {
                env: {
                    CYPRESS_FOO: "foo",
                },
                expected: { FOO: "foo" },
            },
            {
                env: {
                    cypress_FOO: "foo",
                },
                expected: { FOO: "foo" },
            },
            {
                env: {
                    CYPRESS_foo: "foo",
                },
                expected: { foo: "foo" },
            },
            {
                env: {
                    cypress_foo: "foo",
                },
                expected: { foo: "foo" },
            },
        ];
        for (let { env, expected } of envTestMatrix) {
            example(cypress_pre10_configuration_1.resolvePre10Configuration, {
                env,
            }, "env", expected);
        }
    }
    // Override with cypress.json
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        cypressConfig: { env: { FOO: "foo" } },
    }, "env", { FOO: "foo" });
    // Override with cypress.json in custom location
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config-file", "foo.json"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressConfigPath: "foo.json",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--config-file=foo.json"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressConfigPath: "foo.json",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-C", "foo.json"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressConfigPath: "foo.json",
    }, "env", { FOO: "foo" });
    // Override with cypress.env.json
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        cypressEnvConfig: { FOO: "foo" },
    }, "env", { FOO: "foo" });
    // Override with cypress.json & custom project path.
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project", "foo"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project=foo"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-P", "foo"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    // Override with cypress.json in custom location & custom project path.
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project", "foo", "--config-file", "foo.json"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressConfigPath: "foo.json",
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project=foo", "--config-file", "foo.json"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressConfigPath: "foo.json",
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-P", "foo", "--config-file", "foo.json"],
        cypressConfig: { env: { FOO: "foo" } },
        cypressConfigPath: "foo.json",
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    // Override with cypress.env.json & custom project path.
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project", "foo"],
        cypressEnvConfig: { FOO: "foo" },
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["--project=foo"],
        cypressEnvConfig: { FOO: "foo" },
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
    example(cypress_pre10_configuration_1.resolvePre10Configuration, {
        argv: ["-P", "foo"],
        cypressEnvConfig: { FOO: "foo" },
        cypressProjectPath: "foo",
    }, "env", { FOO: "foo" });
});
