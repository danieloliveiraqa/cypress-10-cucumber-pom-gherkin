"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolvePre10TestFiles = exports.resolvePre10Environment = exports.resolvePre10Configuration = exports.isPlainObject = exports.CONFIG_FILE_NAME = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const minimatch_1 = __importDefault(require("minimatch"));
const glob_1 = __importDefault(require("glob"));
const debug_1 = __importDefault(require("../debug"));
const assertions_1 = require("../assertions");
const type_guards_1 = require("../type-guards");
const path_helpers_1 = require("../path-helpers");
const helpers_1 = require("./helpers");
function isStringEntry(entry) {
    return typeof entry[0] === "string" && typeof entry[1] === "string";
}
exports.CONFIG_FILE_NAME = "cypress.json";
function isObject(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject(o) {
    var ctor, prot;
    if (isObject(o) === false)
        return false;
    // If has modified constructor
    ctor = o.constructor;
    if (ctor === undefined)
        return true;
    // If has modified prototype
    prot = ctor.prototype;
    if (isObject(prot) === false)
        return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
    }
    // Most likely a plain Object
    return true;
}
exports.isPlainObject = isPlainObject;
function validateConfigurationEntry(key, value) {
    switch (key) {
        case "projectRoot":
            if (!(0, type_guards_1.isString)(value)) {
                throw new Error(`Expected a string (projectRoot), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "integrationFolder":
            if (!(0, type_guards_1.isString)(value)) {
                throw new Error(`Expected a string (integrationFolder), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "fixturesFolder":
            if (!(0, type_guards_1.isStringOrFalse)(value)) {
                throw new Error(`Expected a string or false (fixturesFolder), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "supportFile":
            if (!(0, type_guards_1.isStringOrFalse)(value)) {
                throw new Error(`Expected a string or false (supportFile), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "testFiles":
            if (!(0, type_guards_1.isStringOrStringArray)(value)) {
                throw new Error(`Expected a string or array of strings (testFiles), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "ignoreTestFiles":
            if (!(0, type_guards_1.isStringOrStringArray)(value)) {
                throw new Error(`Expected a string or array of strings (ignoreTestFiles), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "env": {
            if (!isPlainObject(value)) {
                throw new Error(`Expected a plain object (env), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        }
        default:
            return {};
    }
}
function parseJsonFile(filepath) {
    const content = fs_1.default.readFileSync(filepath).toString("utf8");
    try {
        return JSON.parse(content);
    }
    catch (_a) {
        throw new Error(`Malformed ${filepath}, expected JSON`);
    }
}
function resolvePre10Configuration(options) {
    (0, debug_1.default)(`attempting to resolve Cypress configuration using ${util_1.default.inspect(options)}`);
    const { argv, env } = options;
    const projectPath = (0, helpers_1.resolveProjectPath)(options);
    const cliOrigin = Object.assign({}, ...Array.from((0, helpers_1.combine)((0, helpers_1.traverseArgvMatching)(argv, "--config", true), (0, helpers_1.traverseArgvMatching)(argv, "-c", false)))
        .reverse()
        .flatMap((argument) => {
        const keypairExpr = /(?:^|,)([^=]+)=([^,$]+)/g;
        const entries = [];
        let match;
        while ((match = keypairExpr.exec(argument)) !== null) {
            entries.push(validateConfigurationEntry(match[1], match[2]));
        }
        return entries;
    }));
    const envPrefixExpr = /^cypress_(.+)/i;
    const envOrigin = Object.assign({}, ...Object.entries(env)
        .filter((entry) => {
        return envPrefixExpr.test(entry[0]);
    })
        .filter(isStringEntry)
        .map((entry) => {
        const match = entry[0].match(envPrefixExpr);
        (0, assertions_1.assert)(match, "expected match after test");
        return [(0, assertions_1.assertAndReturn)(match[1]), entry[1]];
    })
        .map((entry) => {
        return validateConfigurationEntry(entry[0].includes("_") ? (0, helpers_1.toCamelCase)(entry[0]) : entry[0], entry[1]);
    }));
    let configOrigin = {};
    const cypressConfigPath = (0, path_helpers_1.ensureIsAbsolute)(projectPath, resolveConfigurationFile(options));
    if (fs_1.default.existsSync(cypressConfigPath)) {
        const cypressConfig = parseJsonFile(cypressConfigPath);
        if (typeof cypressConfig !== "object" || cypressConfig == null) {
            throw new Error(`Malformed ${cypressConfigPath}, expected an object`);
        }
        configOrigin = Object.assign({}, ...Object.entries(cypressConfig).map((entry) => validateConfigurationEntry(...entry)));
    }
    const configuration = Object.assign({
        projectRoot: (0, helpers_1.resolveProjectPath)(options),
        integrationFolder: "cypress/integration",
        fixturesFolder: "cypress/fixtures",
        supportFile: "cypress/support/index.js",
        testFiles: "**/*.*",
        ignoreTestFiles: "*.hot-update.js",
        env: {},
    }, configOrigin, envOrigin, cliOrigin);
    (0, debug_1.default)(`resolved configuration of ${util_1.default.inspect(configuration)}`);
    return Object.assign(Object.assign({}, configuration), { env: resolvePre10Environment(Object.assign(Object.assign({}, options), { projectPath, configOrigin: configuration.env })) });
}
exports.resolvePre10Configuration = resolvePre10Configuration;
function resolvePre10Environment(options) {
    (0, debug_1.default)(`attempting to resolve Cypress environment using ${util_1.default.inspect(options)}`);
    const { argv, env, projectPath, configOrigin } = options;
    const envEntries = Array.from((0, helpers_1.combine)((0, helpers_1.traverseArgvMatching)(argv, "--env", true), (0, helpers_1.traverseArgvMatching)(argv, "-e", false)));
    if (envEntries.length > 1) {
        console.warn("You have specified -e / --env multiple times. This is likely a mistake, as only the last one will take affect. Multiple values should instead be comma-separated.");
    }
    const cliOrigin = Object.fromEntries(envEntries.slice(0, 1).flatMap((argument) => {
        const keypairExpr = /(?:^|,)([^=]+)=([^,$]+)/g;
        const entries = [];
        let match;
        while ((match = keypairExpr.exec(argument)) !== null) {
            entries.push([match[1], match[2]]);
        }
        return entries;
    }));
    const envPrefixExpr = /^cypress_(.+)/i;
    const envOrigin = Object.fromEntries(Object.entries(env)
        .filter((entry) => {
        return envPrefixExpr.test(entry[0]);
    })
        .filter(isStringEntry)
        .map((entry) => {
        const match = entry[0].match(envPrefixExpr);
        (0, assertions_1.assert)(match, "expected match after test");
        return [(0, assertions_1.assertAndReturn)(match[1]), entry[1]];
    }));
    const cypressEnvironmentFilePath = path_1.default.join(projectPath, "cypress.env.json");
    let cypressEnvOrigin = {};
    if (fs_1.default.existsSync(cypressEnvironmentFilePath)) {
        const content = fs_1.default
            .readFileSync(cypressEnvironmentFilePath)
            .toString("utf8");
        cypressEnvOrigin = JSON.parse(content);
    }
    const environment = Object.assign({}, cypressEnvOrigin, configOrigin, envOrigin, cliOrigin);
    (0, debug_1.default)(`resolved environment of ${util_1.default.inspect(environment)}`);
    return environment;
}
exports.resolvePre10Environment = resolvePre10Environment;
function resolveConfigurationFile(options) {
    const { argv } = options;
    return ((0, helpers_1.findArgumentValue)(argv, "--config-file", true) ||
        (0, helpers_1.findArgumentValue)(argv, "-C", false) ||
        exports.CONFIG_FILE_NAME);
}
const MINIMATCH_OPTIONS = { dot: true, matchBase: true };
function resolvePre10TestFiles(configuration) {
    const { projectRoot, integrationFolder, fixturesFolder, supportFile, testFiles, ignoreTestFiles, } = configuration;
    const testFilesPatterns = [testFiles].flat();
    const ignoreTestFilesPatterns = [ignoreTestFiles].flat();
    (0, assertions_1.assertIsString)(integrationFolder, `Expected "integrationFolder" to be a string, got ${util_1.default.inspect(integrationFolder)}`);
    const globIgnore = [];
    if (supportFile) {
        globIgnore.push(supportFile);
    }
    if (fixturesFolder) {
        (0, assertions_1.assertIsString)(fixturesFolder, `Expected "fixturesFolder" to be a string or false, got ${util_1.default.inspect(fixturesFolder)}`);
        globIgnore.push(path_1.default.join(fixturesFolder, "**", "*"));
    }
    const globOptions = {
        sort: true,
        absolute: true,
        nodir: true,
        cwd: (0, path_helpers_1.ensureIsAbsolute)(projectRoot, integrationFolder),
        ignore: globIgnore.flat(),
    };
    const resolvedTestFiles = testFilesPatterns
        .flatMap((testFilesPattern) => glob_1.default.sync(testFilesPattern, globOptions))
        .filter((file) => ignoreTestFilesPatterns.every((ignoreTestFilesPattern) => !(0, minimatch_1.default)(file, ignoreTestFilesPattern, MINIMATCH_OPTIONS)));
    (0, debug_1.default)(`resolved test files ${util_1.default.inspect(resolvedTestFiles)}`);
    return resolvedTestFiles;
}
exports.resolvePre10TestFiles = resolvePre10TestFiles;
