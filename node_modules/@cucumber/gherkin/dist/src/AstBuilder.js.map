{"version":3,"file":"AstBuilder.js","sourceRoot":"","sources":["../../src/AstBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import AstNode from './AstNode'\nimport * as messages from '@cucumber/messages'\nimport { RuleType, TokenType } from './Parser'\nimport { AstBuilderException } from './Errors'\nimport IToken from './IToken'\nimport { IAstBuilder } from './IAstBuilder'\n\nexport default class AstBuilder implements IAstBuilder<AstNode, TokenType, RuleType> {\n  stack: AstNode[]\n  comments: messages.Comment[]\n  readonly newId: messages.IdGenerator.NewId\n\n  constructor(newId: messages.IdGenerator.NewId) {\n    this.newId = newId\n    if (!newId) {\n      throw new Error('No newId')\n    }\n    this.reset()\n  }\n\n  reset() {\n    this.stack = [new AstNode(RuleType.None)]\n    this.comments = []\n  }\n\n  startRule(ruleType: RuleType) {\n    this.stack.push(new AstNode(ruleType))\n  }\n\n  endRule() {\n    const node = this.stack.pop()\n    const transformedNode = this.transformNode(node)\n    this.currentNode().add(node.ruleType, transformedNode)\n  }\n\n  build(token: IToken<TokenType>) {\n    if (token.matchedType === TokenType.Comment) {\n      this.comments.push({\n        location: this.getLocation(token),\n        text: token.matchedText,\n      })\n    } else {\n      this.currentNode().add(token.matchedType, token)\n    }\n  }\n\n  getResult() {\n    return this.currentNode().getSingle(RuleType.GherkinDocument)\n  }\n\n  currentNode() {\n    return this.stack[this.stack.length - 1]\n  }\n\n  getLocation(token: IToken<TokenType>, column?: number): messages.Location {\n    return !column ? token.location : { line: token.location.line, column }\n  }\n\n  getTags(node: AstNode) {\n    const tags: messages.Tag[] = []\n    const tagsNode = node.getSingle(RuleType.Tags)\n    if (!tagsNode) {\n      return tags\n    }\n    const tokens = tagsNode.getTokens(TokenType.TagLine)\n    for (const token of tokens) {\n      for (const tagItem of token.matchedItems) {\n        tags.push({\n          location: this.getLocation(token, tagItem.column),\n          name: tagItem.text,\n          id: this.newId(),\n        })\n      }\n    }\n    return tags\n  }\n\n  getCells(tableRowToken: IToken<TokenType>) {\n    return tableRowToken.matchedItems.map((cellItem) => ({\n      location: this.getLocation(tableRowToken, cellItem.column),\n      value: cellItem.text,\n    }))\n  }\n\n  getDescription(node: AstNode) {\n    return node.getSingle(RuleType.Description) || ''\n  }\n\n  getSteps(node: AstNode) {\n    return node.getItems(RuleType.Step)\n  }\n\n  getTableRows(node: AstNode) {\n    const rows = node.getTokens(TokenType.TableRow).map((token) => ({\n      id: this.newId(),\n      location: this.getLocation(token),\n      cells: this.getCells(token),\n    }))\n    this.ensureCellCount(rows)\n    return rows.length === 0 ? [] : rows\n  }\n\n  ensureCellCount(rows: messages.TableRow[]) {\n    if (rows.length === 0) {\n      return\n    }\n    const cellCount = rows[0].cells.length\n\n    rows.forEach((row) => {\n      if (row.cells.length !== cellCount) {\n        throw AstBuilderException.create('inconsistent cell count within the table', row.location)\n      }\n    })\n  }\n\n  transformNode(node: AstNode) {\n    switch (node.ruleType) {\n      case RuleType.Step: {\n        const stepLine = node.getToken(TokenType.StepLine)\n        const dataTable = node.getSingle(RuleType.DataTable)\n        const docString = node.getSingle(RuleType.DocString)\n\n        const location = this.getLocation(stepLine)\n        const step: messages.Step = {\n          id: this.newId(),\n          location,\n          keyword: stepLine.matchedKeyword,\n          keywordType: stepLine.matchedKeywordType,\n          text: stepLine.matchedText,\n          dataTable: dataTable,\n          docString: docString,\n        }\n        return step\n      }\n      case RuleType.DocString: {\n        const separatorToken = node.getTokens(TokenType.DocStringSeparator)[0]\n        const mediaType =\n          separatorToken.matchedText.length > 0 ? separatorToken.matchedText : undefined\n        const lineTokens = node.getTokens(TokenType.Other)\n        const content = lineTokens.map((t) => t.matchedText).join('\\n')\n\n        const result: messages.DocString = {\n          location: this.getLocation(separatorToken),\n          content,\n          delimiter: separatorToken.matchedKeyword,\n        }\n        // conditionally add this like this (needed to make tests pass on node 0.10 as well as 4.0)\n        if (mediaType) {\n          result.mediaType = mediaType\n        }\n        return result\n      }\n      case RuleType.DataTable: {\n        const rows = this.getTableRows(node)\n        const dataTable: messages.DataTable = {\n          location: rows[0].location,\n          rows,\n        }\n        return dataTable\n      }\n      case RuleType.Background: {\n        const backgroundLine = node.getToken(TokenType.BackgroundLine)\n        const description = this.getDescription(node)\n        const steps = this.getSteps(node)\n\n        const background: messages.Background = {\n          id: this.newId(),\n          location: this.getLocation(backgroundLine),\n          keyword: backgroundLine.matchedKeyword,\n          name: backgroundLine.matchedText,\n          description,\n          steps,\n        }\n        return background\n      }\n      case RuleType.ScenarioDefinition: {\n        const tags = this.getTags(node)\n        const scenarioNode = node.getSingle(RuleType.Scenario)\n        const scenarioLine = scenarioNode.getToken(TokenType.ScenarioLine)\n        const description = this.getDescription(scenarioNode)\n        const steps = this.getSteps(scenarioNode)\n        const examples = scenarioNode.getItems(RuleType.ExamplesDefinition)\n        const scenario: messages.Scenario = {\n          id: this.newId(),\n          tags,\n          location: this.getLocation(scenarioLine),\n          keyword: scenarioLine.matchedKeyword,\n          name: scenarioLine.matchedText,\n          description,\n          steps,\n          examples,\n        }\n        return scenario\n      }\n      case RuleType.ExamplesDefinition: {\n        const tags = this.getTags(node)\n        const examplesNode = node.getSingle(RuleType.Examples)\n        const examplesLine = examplesNode.getToken(TokenType.ExamplesLine)\n        const description = this.getDescription(examplesNode)\n        const examplesTable: messages.TableRow[] = examplesNode.getSingle(RuleType.ExamplesTable)\n\n        const examples: messages.Examples = {\n          id: this.newId(),\n          tags,\n          location: this.getLocation(examplesLine),\n          keyword: examplesLine.matchedKeyword,\n          name: examplesLine.matchedText,\n          description,\n          tableHeader: examplesTable ? examplesTable[0] : undefined,\n          tableBody: examplesTable ? examplesTable.slice(1) : [],\n        }\n        return examples\n      }\n      case RuleType.ExamplesTable: {\n        return this.getTableRows(node)\n      }\n      case RuleType.Description: {\n        let lineTokens = node.getTokens(TokenType.Other)\n        // Trim trailing empty lines\n        let end = lineTokens.length\n        while (end > 0 && lineTokens[end - 1].line.trimmedLineText === '') {\n          end--\n        }\n        lineTokens = lineTokens.slice(0, end)\n\n        return lineTokens.map((token) => token.matchedText).join('\\n')\n      }\n\n      case RuleType.Feature: {\n        const header = node.getSingle(RuleType.FeatureHeader)\n        if (!header) {\n          return null\n        }\n        const tags = this.getTags(header)\n        const featureLine = header.getToken(TokenType.FeatureLine)\n        if (!featureLine) {\n          return null\n        }\n        const children: messages.FeatureChild[] = []\n        const background = node.getSingle(RuleType.Background)\n        if (background) {\n          children.push({\n            background,\n          })\n        }\n        for (const scenario of node.getItems(RuleType.ScenarioDefinition)) {\n          children.push({\n            scenario,\n          })\n        }\n        for (const rule of node.getItems(RuleType.Rule)) {\n          children.push({\n            rule,\n          })\n        }\n\n        const description = this.getDescription(header)\n        const language = featureLine.matchedGherkinDialect\n\n        const feature: messages.Feature = {\n          tags,\n          location: this.getLocation(featureLine),\n          language,\n          keyword: featureLine.matchedKeyword,\n          name: featureLine.matchedText,\n          description,\n          children,\n        }\n        return feature\n      }\n\n      case RuleType.Rule: {\n        const header = node.getSingle(RuleType.RuleHeader)\n        if (!header) {\n          return null\n        }\n        const ruleLine = header.getToken(TokenType.RuleLine)\n        if (!ruleLine) {\n          return null\n        }\n        const tags = this.getTags(header)\n        const children: messages.RuleChild[] = []\n        const background = node.getSingle(RuleType.Background)\n        if (background) {\n          children.push({\n            background,\n          })\n        }\n        for (const scenario of node.getItems(RuleType.ScenarioDefinition)) {\n          children.push({\n            scenario,\n          })\n        }\n        const description = this.getDescription(header)\n\n        const rule: messages.Rule = {\n          id: this.newId(),\n          location: this.getLocation(ruleLine),\n          keyword: ruleLine.matchedKeyword,\n          name: ruleLine.matchedText,\n          description,\n          children,\n          tags,\n        }\n        return rule\n      }\n      case RuleType.GherkinDocument: {\n        const feature = node.getSingle(RuleType.Feature)\n\n        const gherkinDocument: messages.GherkinDocument = {\n          feature,\n          comments: this.comments,\n        }\n        return gherkinDocument\n      }\n      default:\n        return node\n    }\n  }\n}\n"]}