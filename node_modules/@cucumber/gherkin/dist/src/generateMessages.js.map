{"version":3,"file":"generateMessages.js","sourceRoot":"","sources":["../../src/generateMessages.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA4C;AAC5C,8FAAqE;AACrE,6DAA8C;AAC9C,gEAAuC;AACvC,8DAAqC;AAErC,8EAAqD;AAErD,oGAA2E;AAE3E,SAAwB,gBAAgB,CACtC,IAAY,EACZ,GAAW,EACX,SAAmC,EACnC,OAAwB;IAExB,IAAI,YAAsC,CAAA;IAC1C,QAAQ,SAAS,EAAE;QACjB,KAAK,QAAQ,CAAC,eAAe,CAAC,6BAA6B;YACzD,YAAY,GAAG,IAAI,oCAA0B,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;YACrE,MAAK;QACP,KAAK,QAAQ,CAAC,eAAe,CAAC,gCAAgC;YAC5D,YAAY,GAAG,IAAI,uCAA6B,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;YACxE,MAAK;QACP;YACE,MAAM,IAAI,KAAK,CAAC,2BAA2B,SAAS,EAAE,CAAC,CAAA;KAC1D;IAED,MAAM,MAAM,GAAG,EAAE,CAAA;IAEjB,IAAI;QACF,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,MAAM,CAAC,IAAI,CAAC,IAAA,4BAAkB,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;SAC3C;QAED,IAAI,CAAC,OAAO,CAAC,sBAAsB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC9D,OAAO,MAAM,CAAA;SACd;QAED,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,IAAI,oBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,CAAA;QACtE,MAAM,CAAC,gBAAgB,GAAG,KAAK,CAAA;QAE/B,MAAM,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAE1C,IAAI,OAAO,CAAC,sBAAsB,EAAE;YAClC,MAAM,CAAC,IAAI,CAAC;gBACV,eAAe,kCAAO,eAAe,KAAE,GAAG,GAAE;aAC7C,CAAC,CAAA;SACH;QAED,IAAI,OAAO,CAAC,cAAc,EAAE;YAC1B,MAAM,OAAO,GAAG,IAAA,iBAAO,EAAC,eAAe,EAAE,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAA;YAC5D,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC5B,MAAM,CAAC,IAAI,CAAC;oBACV,MAAM;iBACP,CAAC,CAAA;aACH;SACF;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAA;QAClC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACnB,2DAA2D;gBAC3D,MAAM,KAAK,CAAA;aACZ;YACD,MAAM,CAAC,IAAI,CAAC;gBACV,UAAU,EAAE;oBACV,MAAM,EAAE;wBACN,GAAG;wBACH,QAAQ,EAAE;4BACR,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI;4BACzB,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;yBAC9B;qBACF;oBACD,OAAO,EAAE,KAAK,CAAC,OAAO;iBACvB;aACF,CAAC,CAAA;SACH;KACF;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AAtED,mCAsEC","sourcesContent":["import Parser, { TokenType } from './Parser'\nimport GherkinClassicTokenMatcher from './GherkinClassicTokenMatcher'\nimport * as messages from '@cucumber/messages'\nimport compile from './pickles/compile'\nimport AstBuilder from './AstBuilder'\nimport IGherkinOptions from './IGherkinOptions'\nimport makeSourceEnvelope from './makeSourceEnvelope'\nimport ITokenMatcher from './ITokenMatcher'\nimport GherkinInMarkdownTokenMatcher from './GherkinInMarkdownTokenMatcher'\n\nexport default function generateMessages(\n  data: string,\n  uri: string,\n  mediaType: messages.SourceMediaType,\n  options: IGherkinOptions\n): readonly messages.Envelope[] {\n  let tokenMatcher: ITokenMatcher<TokenType>\n  switch (mediaType) {\n    case messages.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_PLAIN:\n      tokenMatcher = new GherkinClassicTokenMatcher(options.defaultDialect)\n      break\n    case messages.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_MARKDOWN:\n      tokenMatcher = new GherkinInMarkdownTokenMatcher(options.defaultDialect)\n      break\n    default:\n      throw new Error(`Unsupported media type: ${mediaType}`)\n  }\n\n  const result = []\n\n  try {\n    if (options.includeSource) {\n      result.push(makeSourceEnvelope(data, uri))\n    }\n\n    if (!options.includeGherkinDocument && !options.includePickles) {\n      return result\n    }\n\n    const parser = new Parser(new AstBuilder(options.newId), tokenMatcher)\n    parser.stopAtFirstError = false\n\n    const gherkinDocument = parser.parse(data)\n\n    if (options.includeGherkinDocument) {\n      result.push({\n        gherkinDocument: { ...gherkinDocument, uri },\n      })\n    }\n\n    if (options.includePickles) {\n      const pickles = compile(gherkinDocument, uri, options.newId)\n      for (const pickle of pickles) {\n        result.push({\n          pickle,\n        })\n      }\n    }\n  } catch (err) {\n    const errors = err.errors || [err]\n    for (const error of errors) {\n      if (!error.location) {\n        // It wasn't a parser error - throw it (this is unexpected)\n        throw error\n      }\n      result.push({\n        parseError: {\n          source: {\n            uri,\n            location: {\n              line: error.location.line,\n              column: error.location.column,\n            },\n          },\n          message: error.message,\n        },\n      })\n    }\n  }\n  return result\n}\n"]}