{"version":3,"file":"GherkinInMarkdownTokenMatcher.js","sourceRoot":"","sources":["../../src/GherkinInMarkdownTokenMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import ITokenMatcher from './ITokenMatcher'\nimport Dialect from './Dialect'\nimport { Token, TokenType } from './Parser'\nimport DIALECTS from './gherkin-languages.json'\nimport { Item } from './IToken'\nimport * as messages from '@cucumber/messages'\nimport { NoSuchLanguageException } from './Errors'\n\nconst DIALECT_DICT: { [key: string]: Dialect } = DIALECTS\nconst DEFAULT_DOC_STRING_SEPARATOR = /^(```[`]*)(.*)/\n\nfunction addKeywordTypeMappings(h: { [key: string]: messages.StepKeywordType[] }, keywords: readonly string[], keywordType: messages.StepKeywordType) {\n  for (const k of keywords) {\n    if (!(k in h)) {\n      h[k] = [] as messages.StepKeywordType[]\n    }\n    h[k].push(keywordType)\n  }\n}\n\nexport default class GherkinInMarkdownTokenMatcher implements ITokenMatcher<TokenType> {\n  private dialect: Dialect\n  private dialectName: string\n  private readonly nonStarStepKeywords: string[]\n  private readonly stepRegexp: RegExp\n  private readonly headerRegexp: RegExp\n  private activeDocStringSeparator: RegExp\n  private indentToRemove: number\n  private matchedFeatureLine: boolean\n  private keywordTypesMap: { [key: string]: messages.StepKeywordType[] }\n\n  constructor(private readonly defaultDialectName: string = 'en') {\n    this.dialect = DIALECT_DICT[defaultDialectName]\n    this.nonStarStepKeywords = []\n      .concat(this.dialect.given)\n      .concat(this.dialect.when)\n      .concat(this.dialect.then)\n      .concat(this.dialect.and)\n      .concat(this.dialect.but)\n      .filter((value, index, self) => value !== '* ' && self.indexOf(value) === index)\n    this.initializeKeywordTypes()\n\n    this.stepRegexp = new RegExp(\n      `${KeywordPrefix.BULLET}(${this.nonStarStepKeywords.map(escapeRegExp).join('|')})`\n    )\n\n    const headerKeywords = []\n      .concat(this.dialect.feature)\n      .concat(this.dialect.background)\n      .concat(this.dialect.rule)\n      .concat(this.dialect.scenarioOutline)\n      .concat(this.dialect.scenario)\n      .concat(this.dialect.examples)\n      .filter((value, index, self) => self.indexOf(value) === index)\n\n    this.headerRegexp = new RegExp(\n      `${KeywordPrefix.HEADER}(${headerKeywords.map(escapeRegExp).join('|')})`\n    )\n\n    this.reset()\n  }\n\n  changeDialect(newDialectName: string, location?: messages.Location) {\n    const newDialect = DIALECT_DICT[newDialectName]\n    if (!newDialect) {\n      throw NoSuchLanguageException.create(newDialectName, location)\n    }\n\n    this.dialectName = newDialectName\n    this.dialect = newDialect\n    this.initializeKeywordTypes()\n  }\n\n  initializeKeywordTypes() {\n    this.keywordTypesMap = {}\n    addKeywordTypeMappings(this.keywordTypesMap, this.dialect.given, messages.StepKeywordType.CONTEXT)\n    addKeywordTypeMappings(this.keywordTypesMap, this.dialect.when, messages.StepKeywordType.ACTION)\n    addKeywordTypeMappings(this.keywordTypesMap, this.dialect.then, messages.StepKeywordType.OUTCOME)\n    addKeywordTypeMappings(this.keywordTypesMap,\n                           [].concat(this.dialect.and).concat(this.dialect.but),\n                           messages.StepKeywordType.CONJUNCTION)\n  }\n\n  // We've made a deliberate choice not to support `# language: [ISO 639-1]` headers or similar\n  // in Markdown. Users should specify a language globally. This can be done in\n  // cucumber-js using the --language [ISO 639-1] option.\n  match_Language(token: Token): boolean {\n    if (!token) throw new Error('no token')\n    return false\n  }\n\n  match_Empty(token: Token): boolean {\n    let result = false\n    if (token.line.isEmpty) {\n      result = true\n    }\n    if (\n      !this.match_TagLine(token) &&\n      !this.match_FeatureLine(token) &&\n      !this.match_ScenarioLine(token) &&\n      !this.match_BackgroundLine(token) &&\n      !this.match_ExamplesLine(token) &&\n      !this.match_RuleLine(token) &&\n      !this.match_TableRow(token) &&\n      !this.match_Comment(token) &&\n      !this.match_Language(token) &&\n      !this.match_DocStringSeparator(token) &&\n      !this.match_EOF(token) &&\n      !this.match_StepLine(token)\n    ) {\n      // neutered\n      result = true\n    }\n\n    if (result) {\n      token.matchedType = TokenType.Empty\n    }\n    return this.setTokenMatched(token, null, result)\n  }\n\n  match_Other(token: Token): boolean {\n    const text = token.line.getLineText(this.indentToRemove) // take the entire line, except removing DocString indents\n    token.matchedType = TokenType.Other\n    token.matchedText = text\n    token.matchedIndent = 0\n    return this.setTokenMatched(token, null, true)\n  }\n\n  match_Comment(token: Token): boolean {\n    let result = false\n    if (token.line.startsWith('|')) {\n      const tableCells = token.line.getTableCells()\n      if (this.isGfmTableSeparator(tableCells)) result = true\n    }\n    return this.setTokenMatched(token, null, result)\n  }\n\n  match_DocStringSeparator(token: Token) {\n    const match = token.line.trimmedLineText.match(this.activeDocStringSeparator)\n    const [, newSeparator, mediaType] = match || []\n    let result = false\n    if (newSeparator) {\n      if (this.activeDocStringSeparator === DEFAULT_DOC_STRING_SEPARATOR) {\n        this.activeDocStringSeparator = new RegExp(`^(${newSeparator})$`)\n        this.indentToRemove = token.line.indent\n      } else {\n        this.activeDocStringSeparator = DEFAULT_DOC_STRING_SEPARATOR\n      }\n\n      token.matchedKeyword = newSeparator\n      token.matchedType = TokenType.DocStringSeparator\n      token.matchedText = mediaType || ''\n\n      result = true\n    }\n    return this.setTokenMatched(token, null, result)\n  }\n\n  match_EOF(token: Token): boolean {\n    let result = false\n    if (token.isEof) {\n      token.matchedType = TokenType.EOF\n      result = true\n    }\n    return this.setTokenMatched(token, null, result)\n  }\n\n  match_FeatureLine(token: Token): boolean {\n    if (this.matchedFeatureLine) {\n      return this.setTokenMatched(token, null, false)\n    }\n    // We first try to match \"# Feature: blah\"\n    let result = this.matchTitleLine(\n      KeywordPrefix.HEADER,\n      this.dialect.feature,\n      ':',\n      token,\n      TokenType.FeatureLine\n    )\n    // If we didn't match \"# Feature: blah\", we still match this line\n    // as a FeatureLine.\n    // The reason for this is that users may not want to be constrained by having this as their fist line.\n    if (!result) {\n      token.matchedType = TokenType.FeatureLine\n      token.matchedText = token.line.trimmedLineText\n      result = this.setTokenMatched(token, null, true)\n    }\n    this.matchedFeatureLine = result\n    return result\n  }\n\n  match_BackgroundLine(token: Token): boolean {\n    return this.matchTitleLine(\n      KeywordPrefix.HEADER,\n      this.dialect.background,\n      ':',\n      token,\n      TokenType.BackgroundLine\n    )\n  }\n\n  match_RuleLine(token: Token): boolean {\n    return this.matchTitleLine(\n      KeywordPrefix.HEADER,\n      this.dialect.rule,\n      ':',\n      token,\n      TokenType.RuleLine\n    )\n  }\n\n  match_ScenarioLine(token: Token): boolean {\n    return (\n      this.matchTitleLine(\n        KeywordPrefix.HEADER,\n        this.dialect.scenario,\n        ':',\n        token,\n        TokenType.ScenarioLine\n      ) ||\n      this.matchTitleLine(\n        KeywordPrefix.HEADER,\n        this.dialect.scenarioOutline,\n        ':',\n        token,\n        TokenType.ScenarioLine\n      )\n    )\n  }\n\n  match_ExamplesLine(token: Token): boolean {\n    return this.matchTitleLine(\n      KeywordPrefix.HEADER,\n      this.dialect.examples,\n      ':',\n      token,\n      TokenType.ExamplesLine\n    )\n  }\n\n  match_StepLine(token: Token): boolean {\n    return this.matchTitleLine(\n      KeywordPrefix.BULLET,\n      this.nonStarStepKeywords,\n      '',\n      token,\n      TokenType.StepLine\n    )\n  }\n\n  matchTitleLine(\n    prefix: KeywordPrefix,\n    keywords: readonly string[],\n    keywordSuffix: ':' | '',\n    token: Token,\n    matchedType: TokenType\n  ) {\n    const regexp = new RegExp(\n      `${prefix}(${keywords.map(escapeRegExp).join('|')})${keywordSuffix}(.*)`\n    )\n    const match = token.line.match(regexp)\n    let indent = token.line.indent\n    let result = false\n    if (match) {\n      token.matchedType = matchedType\n      token.matchedKeyword = match[2]\n\n      if (match[2] in this.keywordTypesMap) {\n        // only set the keyword type if this is a step keyword\n        if (this.keywordTypesMap[match[2]].length > 1) {\n          token.matchedKeywordType = messages.StepKeywordType.UNKNOWN\n        }\n        else {\n          token.matchedKeywordType = this.keywordTypesMap[match[2]][0]\n        }\n      }\n      token.matchedText = match[3].trim()\n      indent += match[1].length\n      result = true\n    }\n    return this.setTokenMatched(token, indent, result)\n  }\n\n  setTokenMatched(token: Token, indent: number | null, matched: boolean) {\n    token.matchedGherkinDialect = this.dialectName\n    token.matchedIndent = indent !== null ? indent : token.line == null ? 0 : token.line.indent\n    token.location.column = token.matchedIndent + 1\n    return matched\n  }\n\n  match_TableRow(token: Token): boolean {\n    // Gherkin tables must be indented 2-5 spaces in order to be distinguidedn from non-Gherkin tables\n    if (token.line.lineText.match(/^\\s\\s\\s?\\s?\\s?\\|/)) {\n      const tableCells = token.line.getTableCells()\n      if (this.isGfmTableSeparator(tableCells)) return false\n\n      token.matchedKeyword = '|'\n      token.matchedType = TokenType.TableRow\n      token.matchedItems = tableCells\n      return true\n    }\n    return false\n  }\n\n  private isGfmTableSeparator(tableCells: readonly Item[]): boolean {\n    const separatorValues = tableCells\n      .map((item) => item.text)\n      .filter((value) => value.match(/^:?-+:?$/))\n    return separatorValues.length > 0\n  }\n\n  match_TagLine(token: Token): boolean {\n    const tags: Item[] = []\n    let m: RegExpMatchArray\n    const re = /`(@[^`]+)`/g\n    do {\n      m = re.exec(token.line.trimmedLineText)\n      if (m) {\n        tags.push({\n          column: token.line.indent + m.index + 2,\n          text: m[1],\n        })\n      }\n    } while (m)\n\n    if (tags.length === 0) return false\n    token.matchedType = TokenType.TagLine\n    token.matchedItems = tags\n    return true\n  }\n\n  reset(): void {\n    if (this.dialectName !== this.defaultDialectName) {\n      this.changeDialect(this.defaultDialectName)\n    }\n    this.activeDocStringSeparator = DEFAULT_DOC_STRING_SEPARATOR\n  }\n}\n\nenum KeywordPrefix {\n  // https://spec.commonmark.org/0.29/#bullet-list-marker\n  BULLET = '^(\\\\s*[*+-]\\\\s*)',\n  HEADER = '^(#{1,6}\\\\s)',\n}\n\n// https://stackoverflow.com/questions/3115150/how-to-escape-regular-expression-special-characters-using-javascript\nfunction escapeRegExp(text: string) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n"]}