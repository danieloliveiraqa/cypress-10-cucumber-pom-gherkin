{"version":3,"file":"GherkinLine.js","sourceRoot":"","sources":["../../src/GherkinLine.ts"],"names":[],"mappings":"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","sourcesContent":["import countSymbols from './countSymbols'\nimport { IGherkinLine, Item } from './IToken'\n\nexport default class GherkinLine implements IGherkinLine {\n  public trimmedLineText: string\n  public isEmpty: boolean\n  public readonly indent: number\n  public column: number\n  public text: string\n\n  constructor(public readonly lineText: string, public readonly lineNumber: number) {\n    this.trimmedLineText = lineText.replace(/^\\s+/g, '') // ltrim\n    this.isEmpty = this.trimmedLineText.length === 0\n    this.indent = countSymbols(lineText) - countSymbols(this.trimmedLineText)\n  }\n\n  public startsWith(prefix: string) {\n    return this.trimmedLineText.indexOf(prefix) === 0\n  }\n\n  public startsWithTitleKeyword(keyword: string) {\n    return this.startsWith(keyword + ':') // The C# impl is more complicated. Find out why.\n  }\n\n  public match(regexp: RegExp) {\n    return this.trimmedLineText.match(regexp)\n  }\n\n  public getLineText(indentToRemove: number) {\n    if (indentToRemove < 0 || indentToRemove > this.indent) {\n      return this.trimmedLineText\n    } else {\n      return this.lineText.substring(indentToRemove)\n    }\n  }\n\n  public getRestTrimmed(length: number) {\n    return this.trimmedLineText.substring(length).trim()\n  }\n\n  public getTableCells(): readonly Item[] {\n    const cells = []\n    let col = 0\n    let startCol = col + 1\n    let cell = ''\n    let firstCell = true\n    while (col < this.trimmedLineText.length) {\n      let chr = this.trimmedLineText[col]\n      col++\n\n      if (chr === '|') {\n        if (firstCell) {\n          // First cell (content before the first |) is skipped\n          firstCell = false\n        } else {\n          // Keeps newlines\n          const trimmedLeft = cell.replace(/^[ \\t\\v\\f\\r\\u0085\\u00A0]*/g, '')\n          const trimmed = trimmedLeft.replace(/[ \\t\\v\\f\\r\\u0085\\u00A0]*$/g, '')\n          const cellIndent = cell.length - trimmedLeft.length\n          const span = {\n            column: this.indent + startCol + cellIndent,\n            text: trimmed,\n          }\n          cells.push(span)\n        }\n        cell = ''\n        startCol = col + 1\n      } else if (chr === '\\\\') {\n        chr = this.trimmedLineText[col]\n        col += 1\n        if (chr === 'n') {\n          cell += '\\n'\n        } else {\n          if (chr !== '|' && chr !== '\\\\') {\n            cell += '\\\\'\n          }\n          cell += chr\n        }\n      } else {\n        cell += chr\n      }\n    }\n\n    return cells\n  }\n}\n\nmodule.exports = GherkinLine\n"]}