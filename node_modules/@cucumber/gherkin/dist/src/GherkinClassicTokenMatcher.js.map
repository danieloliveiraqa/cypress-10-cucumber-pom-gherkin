{"version":3,"file":"GherkinClassicTokenMatcher.js","sourceRoot":"","sources":["../../src/GherkinClassicTokenMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import DIALECTS from './gherkin-languages.json'\nimport Dialect from './Dialect'\nimport { NoSuchLanguageException, ParserException } from './Errors'\nimport IToken, { IGherkinLine, Item } from './IToken'\nimport * as messages from '@cucumber/messages'\nimport { TokenType } from './Parser'\nimport ITokenMatcher from './ITokenMatcher'\nimport countSymbols from './countSymbols'\n\nconst DIALECT_DICT: { [key: string]: Dialect } = DIALECTS\nconst LANGUAGE_PATTERN = /^\\s*#\\s*language\\s*:\\s*([a-zA-Z\\-_]+)\\s*$/\n\nfunction addKeywordTypeMappings(h: { [key: string]: messages.StepKeywordType[] }, keywords: readonly string[], keywordType: messages.StepKeywordType) {\n  for (const k of keywords) {\n    if (!(k in h)) {\n      h[k] = [] as messages.StepKeywordType[]\n    }\n    h[k].push(keywordType)\n  }\n}\n\nexport default class GherkinClassicTokenMatcher implements ITokenMatcher<TokenType> {\n  private dialect: Dialect\n  private dialectName: string\n  private activeDocStringSeparator: string\n  private indentToRemove: number\n  private keywordTypesMap: { [key: string]: messages.StepKeywordType[] }\n\n  constructor(private readonly defaultDialectName: string = 'en') {\n    this.reset()\n  }\n\n  changeDialect(newDialectName: string, location?: messages.Location) {\n    const newDialect = DIALECT_DICT[newDialectName]\n    if (!newDialect) {\n      throw NoSuchLanguageException.create(newDialectName, location)\n    }\n\n    this.dialectName = newDialectName\n    this.dialect = newDialect\n    this.initializeKeywordTypes()\n  }\n\n  reset() {\n    if (this.dialectName !== this.defaultDialectName) {\n      this.changeDialect(this.defaultDialectName)\n    }\n    this.activeDocStringSeparator = null\n    this.indentToRemove = 0\n  }\n\n  initializeKeywordTypes() {\n    this.keywordTypesMap = {}\n    addKeywordTypeMappings(this.keywordTypesMap, this.dialect.given, messages.StepKeywordType.CONTEXT)\n    addKeywordTypeMappings(this.keywordTypesMap, this.dialect.when, messages.StepKeywordType.ACTION)\n    addKeywordTypeMappings(this.keywordTypesMap, this.dialect.then, messages.StepKeywordType.OUTCOME)\n    addKeywordTypeMappings(this.keywordTypesMap,\n                           [].concat(this.dialect.and).concat(this.dialect.but),\n                           messages.StepKeywordType.CONJUNCTION)\n  }\n\n  match_TagLine(token: IToken<TokenType>) {\n    if (token.line.startsWith('@')) {\n      this.setTokenMatched(token, TokenType.TagLine, null, null, null, null, this.getTags(token.line))\n      return true\n    }\n    return false\n  }\n\n  match_FeatureLine(token: IToken<TokenType>) {\n    return this.matchTitleLine(token, TokenType.FeatureLine, this.dialect.feature)\n  }\n\n  match_ScenarioLine(token: IToken<TokenType>) {\n    return (\n      this.matchTitleLine(token, TokenType.ScenarioLine, this.dialect.scenario) ||\n      this.matchTitleLine(token, TokenType.ScenarioLine, this.dialect.scenarioOutline)\n    )\n  }\n\n  match_BackgroundLine(token: IToken<TokenType>) {\n    return this.matchTitleLine(token, TokenType.BackgroundLine, this.dialect.background)\n  }\n\n  match_ExamplesLine(token: IToken<TokenType>) {\n    return this.matchTitleLine(token, TokenType.ExamplesLine, this.dialect.examples)\n  }\n\n  match_RuleLine(token: IToken<TokenType>) {\n    return this.matchTitleLine(token, TokenType.RuleLine, this.dialect.rule)\n  }\n\n  match_TableRow(token: IToken<TokenType>) {\n    if (token.line.startsWith('|')) {\n      // TODO: indent\n      this.setTokenMatched(token, TokenType.TableRow, null, null, null, null, token.line.getTableCells())\n      return true\n    }\n    return false\n  }\n\n  match_Empty(token: IToken<TokenType>) {\n    if (token.line.isEmpty) {\n      this.setTokenMatched(token, TokenType.Empty, null, null, 0)\n      return true\n    }\n    return false\n  }\n\n  match_Comment(token: IToken<TokenType>) {\n    if (token.line.startsWith('#')) {\n      const text = token.line.getLineText(0) // take the entire line, including leading space\n      this.setTokenMatched(token, TokenType.Comment, text, null, 0)\n      return true\n    }\n    return false\n  }\n\n  match_Language(token: IToken<TokenType>) {\n    const match = token.line.trimmedLineText.match(LANGUAGE_PATTERN)\n    if (match) {\n      const newDialectName = match[1]\n      this.setTokenMatched(token, TokenType.Language, newDialectName)\n\n      this.changeDialect(newDialectName, token.location)\n      return true\n    }\n    return false\n  }\n\n  match_DocStringSeparator(token: IToken<TokenType>) {\n    return this.activeDocStringSeparator == null\n      ? // open\n        this._match_DocStringSeparator(token, '\"\"\"', true) ||\n          this._match_DocStringSeparator(token, '```', true)\n      : // close\n        this._match_DocStringSeparator(token, this.activeDocStringSeparator, false)\n  }\n\n  public _match_DocStringSeparator(token: IToken<TokenType>, separator: string, isOpen: boolean) {\n    if (token.line.startsWith(separator)) {\n      let mediaType = null\n      if (isOpen) {\n        mediaType = token.line.getRestTrimmed(separator.length)\n        this.activeDocStringSeparator = separator\n        this.indentToRemove = token.line.indent\n      } else {\n        this.activeDocStringSeparator = null\n        this.indentToRemove = 0\n      }\n\n      this.setTokenMatched(token, TokenType.DocStringSeparator, mediaType, separator)\n      return true\n    }\n    return false\n  }\n\n  match_EOF(token: IToken<TokenType>) {\n    if (token.isEof) {\n      this.setTokenMatched(token, TokenType.EOF)\n      return true\n    }\n    return false\n  }\n\n  match_StepLine(token: IToken<TokenType>) {\n    const keywords = []\n      .concat(this.dialect.given)\n      .concat(this.dialect.when)\n      .concat(this.dialect.then)\n      .concat(this.dialect.and)\n      .concat(this.dialect.but)\n    for (const keyword of keywords) {\n      if (token.line.startsWith(keyword)) {\n        const title = token.line.getRestTrimmed(keyword.length)\n        const keywordTypes = this.keywordTypesMap[keyword]\n        let keywordType = keywordTypes[0]\n        if (keywordTypes.length > 1) {\n          keywordType = messages.StepKeywordType.UNKNOWN\n        }\n\n        this.setTokenMatched(token, TokenType.StepLine, title, keyword, null, keywordType)\n        return true\n      }\n    }\n\n    return false\n  }\n\n  match_Other(token: IToken<TokenType>) {\n    const text = token.line.getLineText(this.indentToRemove) // take the entire line, except removing DocString indents\n    this.setTokenMatched(token, TokenType.Other, this.unescapeDocString(text), null, 0)\n    return true\n  }\n\n  getTags(line: IGherkinLine): readonly Item[] {\n    const uncommentedLine = line.trimmedLineText.split(/\\s#/g, 2)[0]\n    let column = line.indent + 1\n    const items = uncommentedLine.split('@')\n    const tags: any[] = []\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i].trimRight()\n      if (item.length == 0) {\n        continue\n      }\n      if (!item.match(/^\\S+$/)) {\n        throw ParserException.create('A tag may not contain whitespace', line.lineNumber, column)\n      }\n      const span = { column, text: '@' + item }\n      tags.push(span)\n      column += countSymbols(items[i]) + 1\n    }\n    return tags\n  }\n\n  private matchTitleLine(\n    token: IToken<TokenType>,\n    tokenType: TokenType,\n    keywords: readonly string[]\n  ): boolean {\n    for (const keyword of keywords) {\n      if (token.line.startsWithTitleKeyword(keyword)) {\n        const title = token.line.getRestTrimmed(keyword.length + ':'.length)\n        this.setTokenMatched(token, tokenType, title, keyword)\n        return true\n      }\n    }\n    return false\n  }\n\n  private setTokenMatched(\n    token: IToken<TokenType>,\n    matchedType: TokenType,\n    text?: string,\n    keyword?: string,\n    indent?: number,\n    keywordType?: messages.StepKeywordType,\n    items?: readonly Item[]\n  ) {\n    token.matchedType = matchedType\n    token.matchedText = text\n    token.matchedKeyword = keyword\n    token.matchedKeywordType = keywordType\n    token.matchedIndent =\n      typeof indent === 'number' ? indent : token.line == null ? 0 : token.line.indent\n    token.matchedItems = items || []\n\n    token.location.column = token.matchedIndent + 1\n    token.matchedGherkinDialect = this.dialectName\n  }\n\n  private unescapeDocString(text: string) {\n    if (this.activeDocStringSeparator === '\"\"\"') {\n      return text.replace('\\\\\"\\\\\"\\\\\"', '\"\"\"')\n    }\n    if (this.activeDocStringSeparator === '```') {\n      return text.replace('\\\\`\\\\`\\\\`', '```')\n    }\n    return text\n  }\n}\n"]}